# frozen_string_literal: true

require 'project_euler'

RSpec.describe ProjectEuler do
  describe '#problem008' do
    thousand_digit_number = <<~LONG_INT.gsub(/\s+/, '').to_i
      7316717653133062491922511967442657474235534919493496983520312774506326239578318
      0169848018694788518438586156078911294949545950173795833195285320880551112540698
      7471585238630507156932909632952274430435576689664895044524452316173185640309871
      1121722383113622298934233803081353362766142828064444866452387493035890729629049
      1560440772390713810515859307960866701724271218839987979087922749219016997208880
      9377665727333001053367881220235421809751254540594752243525849077116705560136048
      3958644670632441572215539753697817977846174064955149290862569321978468622482839
      7224137565705605749026140797296865241453510047482166370484403199890008895243450
      6585412275886668811642717147992444292823086346567481391912316282458617866458359
      1245665294765456828489128831426076900422421902267105562632111110937054421750694
      1658960408071984038509624554443629812309878799272442849091888458015616609791913
      3875499200524063689912560717606058861164671094050775410022569831552000559357297
      2571636269561882670428252483600823257530420752963450
    LONG_INT

    it 'largest product of four adjacent numbers' do
      expect(described_class.problem008(thousand_digit_number, 4)).to eq(5832)
    end

    it 'largest product of thirteen adjacent numbers' do
      expect(described_class.problem008(thousand_digit_number, 13)).to eq(23_514_624_000)
    end
  end
end
